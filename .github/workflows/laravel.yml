name: Laravel

on:
  push:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Setup PHP Environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'

    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache PHP dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      run: composer install -q --no-interaction --no-progress --no-scripts --prefer-dist

    - name: Run phpCS linter
      run: vendor/bin/phpcs --standard=phpcs.xml

    - name: Run php_cs_fixer linter
      run: vendor/bin/php-cs-fixer -v fix --diff --dry-run


  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: hotel-hamlet
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Setup PHP Environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache PHP dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      run: composer install -q --no-interaction --no-progress --no-scripts --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Setup Node.js environment
      uses: actions/setup-node@v2.1.4
      with:
        node-version: '14'
        check-latest:

    - name: Install node dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: hotel-hamlet
        DB_USERNAME: root
        DB_PASSWORD: secret
      run: vendor/bin/phpunit


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/master'
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Deploy to fly
      run: flyctl deploy --remote-only
