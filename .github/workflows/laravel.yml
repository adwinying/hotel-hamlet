name: Laravel

on:
  push:

jobs:
  build_frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node.js environment
      uses: actions/setup-node@v2.1.4
      with:
        node-version: '14'
        check-latest:

    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install node dependencies
      run: npm ci

    - name: Build for production
      run: npm run prod

    - name: Save frontend build
      uses: actions/upload-artifact@v2
      with:
        name: frontend
        path: public/


  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Setup PHP Environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'

    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache PHP dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      run: composer install -q --no-interaction --no-progress --no-scripts --prefer-dist

    - name: Run phpCS linter
      run: vendor/bin/phpcs --standard=phpcs.xml

    - name: Run php_cs_fixer linter
      run: vendor/bin/php-cs-fixer -v fix --diff-format udiff --dry-run


  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build_frontend
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: hotel-hamlet
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
    - name: Setup PHP Environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'

    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Retrieve compiled frontend build
      uses: actions/download-artifact@v2
      with:
        name: frontend
        path: public/

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache PHP dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      run: composer install -q --no-interaction --no-progress --no-scripts --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: hotel-hamlet
        DB_USERNAME: root
        DB_PASSWORD: secret
      run: vendor/bin/phpunit


  build_image:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: build_frontend
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Retrieve compiled frontend build
      uses: actions/download-artifact@v2
      with:
        name: frontend
        path: public/

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache PHP dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      run: composer install -q --no-interaction --no-progress --no-scripts --prefer-dist

    - name: Create database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Run DB migrations
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan migrate --force --seed

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: |
          adwinying/hotel-hamlet:${{ github.sha }}
          adwinying/hotel-hamlet:latest

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_image
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Login to Heroku Container registry
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:login

    - name: Pull built image from docker hub
      run: docker pull adwinying/hotel-hamlet

    - name: Prepare docker image for Heroku
      run: docker tag adwinying/hotel-hamlet registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

    - name: Push docker image to Heroku
      run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

    - name: Release image
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:release -a ${{ secrets.HEROKU_APP_NAME }} web
