# Name of your application. Used to uniquely configure containers.
service: hotel-hamlet

# Name of the container image.
image: ghcr.io/adwinying/hotel-hamlet

# Deploy to these servers.
servers:
  web:
    - stage
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: hotel-hamlet.stg.iadw.in
  app_port: 8080
  healthcheck:
    path: /healthcheck

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: ghcr.io
  username: adwinying
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  args:
    APP_URL: https://hotel-hamlet.stg.iadw.in
    PHP_VERSION: 8.2
    NODE_VERSION: 18
    DB_CONNECTION: sqlite
    DB_DATABASE: /data/sqlite.db

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    APP_ENV: production
    APP_URL: https://hotel-hamlet.stg.iadw.in
    LOG_CHANNEL: stderr
    LOG_LEVEL: info
    LOG_STDERR_FORMATTER: "Monolog\\Formatter\\JsonFormatter"
    DB_CONNECTION: sqlite
    DB_DATABASE: /data/sqlite.db
  secret:
    - APP_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
ssh:
  user: adwin

# Use a persistent storage volume.
# volumes:
#   - "$HOME/appdata/hotel-hamlet/data:/data"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
